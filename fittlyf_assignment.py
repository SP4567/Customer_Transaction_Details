# -*- coding: utf-8 -*-
"""Fittlyf_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWzXozuv0ubGDItlSnMgRQDarTyRkm8G

**Importing the required libraries**

**This involves importing all those libraries which are required for Exploratory data analysis and model development**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
import keras
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.layers import Dense
import warnings
warnings.filterwarnings("ignore")

"""**Reading the csv file and converting the dataset to dataframe**"""

# Open the CSV file in a text editor and add quotes around fields with commas
c = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/data.csv", encoding="ISO-8859-1")

"""**Displaying the first five rows using the head() function**"""

c.head(15)

"""**Info of the data**"""

c.info()

"""**Filling all the null values using the fillna() function and forward fill method**"""

c['UnitPrice'] = c['UnitPrice'].fillna(method = 'ffill')

c['CustomerID'] = c['CustomerID'].fillna(method = 'ffill')

c['Description'] = c['Description'].fillna(method = 'ffill')

c['Country'] = c['Country'].fillna(method = 'ffill')

c.info()

c.isnull().sum()

"""**Description of the data**"""

c.describe()

"""**Scatterplot between Unit Price and the Quantity**"""

sns.scatterplot(x = 'UnitPrice',y = 'Quantity',data = c)

"""**Quantity plot**"""

c['Quantity'].plot()
plt.xlabel('Quantity')

"""**Violin plot of Quantity**"""

sns.violinplot(c['Quantity'])

"""**Violin Plot of Unit Price**"""

sns.violinplot(c['UnitPrice'])

c['UnitPrice'] > 0

c['Quantity'] > 0

"""**Changing the Date format**"""

import datetime as dt
d = dt.date(2011,12,9)

d

"""**Adding the new column date to the dataframe**"""

c['date'] = pd.DatetimeIndex(c.InvoiceDate).date

c.head(5)

"""**Boxplot of the CustomerID which gives the 5 member summary of the data**

**1. Minimum = 12000**

**2. First Quartile = 13850**

**3. Median = 15100**

**4. Third Quartile = 17850**

**5. Maximum = 18500**
"""

sns.boxplot(x = 'CustomerID', data = c)

"""**Calculation of Recency**"""

recency = c.groupby(['CustomerID'], as_index = False)['date'].max()
recency.columns = ['CustomerID', 'LastPurchaseDate']
recency.head()

"""**Graph of Recency as a time series**"""

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  counted = (series['LastPurchaseDate']
                .value_counts()
              .reset_index(name='counts')
              .rename({'index': 'LastPurchaseDate'}, axis=1)
              .sort_values('LastPurchaseDate', ascending=True))
  xs = counted['LastPurchaseDate']
  ys = counted['counts']
  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])
fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = recency.sort_values('LastPurchaseDate', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('LastPurchaseDate')
_ = plt.ylabel('count()')

recency['Recency'] = recency.LastPurchaseDate.apply(lambda x:(d - x).days)

recency.head(5)

"""**Recency Graph**"""

plt.figure(figsize=(8,5))
sns.distplot(recency.Recency, kde = True, rug = True)

recency.drop(columns=['LastPurchaseDate'],inplace=True)

recency

"""**Calculation of Frequency**"""

freq = c
freq = freq.groupby('CustomerID', as_index = False)['InvoiceNo'].count()
freq_dataframe = pd.DataFrame(freq)
freq_dataframe.columns = ['CustomerID','Frequency']
freq_dataframe.head()

"""**Frequency Graph**"""

from matplotlib import pyplot as plt
freq_dataframe.plot(kind='scatter', x='CustomerID', y='Frequency', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Calculation of Monetary**"""

c['Price'] = c['UnitPrice'] * c['Quantity']

monetary = c.groupby(['CustomerID'], as_index = False)['Price'].sum()
monetary.columns = ['CustomerID', 'Monetary']

monetary.head()

"""**Scatterplot between monetary and customerID**"""

from matplotlib import pyplot as plt
monetary.plot(kind='scatter', x='CustomerID', y='Monetary', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Monetary graph**"""

plt.figure(figsize = (8,5))
sns.distplot(monetary.Monetary, kde = True, rug = True)

"""**Monetary added to the new dataframe**"""

recency_frequency = recency.merge(freq, on = 'CustomerID')
recency_frequency_monetary = recency_frequency.merge(monetary)
recency_frequency_monetary.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']
recency_frequency_monetary.set_index('CustomerID', inplace = True)
recency_frequency_monetary.head(5)

"""**Frequency of Recency**"""

from matplotlib import pyplot as plt
recency_frequency_monetary['Recency'].plot(kind='hist', bins=20, title='Recency')
plt.xlabel("Recency")
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Frequency of Frequency**"""

from matplotlib import pyplot as plt
recency_frequency_monetary['Frequency'].plot(kind='hist', bins=20, title='Frequency')
plt.xlabel('Frequency')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Frequency of Monetary**"""

from matplotlib import pyplot as plt
recency_frequency_monetary['Monetary'].plot(kind='hist', bins=20, title='Monetary')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Elbow Graph of the Clustering model**"""

n = range(1,40)
Clustering_model = [KMeans(n_clusters=i) for i in n]
score = [Clustering_model[i].fit(recency_frequency_monetary).score(recency_frequency_monetary) for i in range(len(Clustering_model))]
plt.plot(n, score)
plt.xlabel("Number of clusters")
plt.ylabel("Score")
plt.show()

"""**Assigning the number of clusters to be made by the model for clustering the objects and fitting the required data in the model for training by taking 3 number of clusters**"""

Clustering_model = KMeans(n_clusters = 3, random_state = 0).fit(recency_frequency_monetary)

recency_frequency_monetary['cluster'] = Clustering_model.labels_

"""**First Five 0 Clusters**"""

recency_frequency_monetary[recency_frequency_monetary.cluster == 0].head(5)

"""**First Five 1 Clusters**"""

recency_frequency_monetary[recency_frequency_monetary.cluster == 1].head(5)

"""**First Five 2 Clusters**"""

recency_frequency_monetary[recency_frequency_monetary.cluster == 2].head(5)

"""**Training of the Clustering model by taking 4 number of clusters(not chosen for analysis because the number of objects in the clusters are not equal that is in cluster 1 two objects are missing**"""

Clustering_model2 = KMeans(n_clusters = 4, random_state = 0).fit(recency_frequency_monetary)

recency_frequency_monetary['cluster2'] = Clustering_model2.labels_

recency_frequency_monetary[recency_frequency_monetary.cluster2 == 0].head(5)

recency_frequency_monetary[recency_frequency_monetary.cluster2 == 1].head(5)

recency_frequency_monetary[recency_frequency_monetary.cluster2 == 2].head(5)

recency_frequency_monetary[recency_frequency_monetary.cluster2 == 3].head(5)

"""**Barplot of Recency, Frequency and Monetary versus the number of clusters**"""

plt.figure(figsize = (100,10))
plt.subplots(1, 3)
sns.barplot(x = recency_frequency_monetary.cluster, y = recency_frequency_monetary.Recency, data = recency_frequency_monetary, ax = plt.subplot(1, 3, 1))
sns.barplot(x = recency_frequency_monetary.cluster, y = recency_frequency_monetary.Frequency, data = recency_frequency_monetary, ax = plt.subplot(1, 3, 2))
sns.barplot(x = recency_frequency_monetary.cluster, y = recency_frequency_monetary.Monetary, data = recency_frequency_monetary, ax = plt.subplot(1, 3, 3))
plt.subplots_adjust(wspace = 1)

"""**Steps for the development of the churn prediction model**"""

recency_frequency_monetary['Churn_risk'] =  recency_frequency_monetary['cluster'].apply(lambda x:'High' if x == 1 else 'Low')

recency_frequency_monetary['Churn_risk'] = recency_frequency_monetary['Churn_risk'].replace({'High': 1, 'Low': 0})

recency_frequency_monetary['Churn_risk'] == 'Low'

"""**Churn risk column added the dataframe**"""

recency_frequency_monetary

"""**Predictor variable and target variable chosen as X and y respectively**"""

X = recency_frequency_monetary.drop({'Churn_risk', 'cluster', 'cluster2'}, axis = 1)

y = recency_frequency_monetary[['Churn_risk']]

"""**Splitting the dataframe into train and test, 80% train , 20% test**"""

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2)

"""**Scaling the data**"""

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)

X_scaled

X_test_scaled

y_test

y_train

y_train_scaled = scaler.fit_transform(y_train)
y_test_scaled = scaler.fit_transform(y_test)

print(X_train.shape, X_scaled.shape, X_test_scaled.shape)
print(y_train.shape, y_train_scaled.shape, y_test_scaled.shape)

"""**Creating the Sequential Model contains 1 input layer, 3 hidden layers and one output layer**"""

Churn_predictor = tf.keras.models.Sequential([Dense(64, activation = 'relu', input_shape = (3, )),
                                              Dense(32, activation = 'relu'),
                                              Dense(32, activation = 'relu'),
                                              Dense(16, activation = 'relu'),
                                              Dense(1, activation = 'sigmoid')])
Churn_predictor.summary()

Churn_predictor.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""**Model training**"""

from tensorflow.keras.callbacks import EarlyStopping
es = EarlyStopping(monitor = 'val_loss', patience = 1)
Churn_predictor.fit(X_scaled, y_train_scaled, validation_data = (X_test_scaled, y_test_scaled), epochs = 25, callbacks = [es])

"""**Plotting the history of the training**"""

hist = Churn_predictor.history.history
newhist = pd.DataFrame(hist)
newhist.plot()

print(newhist)

"""**Model Prediction on the testing data**"""

#X_test = X_test.astype('float32')
y_predict = Churn_predictor.predict(X_test)
#X_train = X_train.astype('float32')
y_train_predict = Churn_predictor.predict(X_train)

df = pd.DataFrame(y_predict)
df2 = pd.DataFrame(y_train_predict)

df.head()

df2.head()

"""**Saving the model**"""

Churn_predictor.save("Model.h5")

"""**Loading the model for prediction**"""

from tensorflow.keras.models import load_model
model = load_model('Model.h5')

predictions = model.predict(X_test)
print(predictions > 0.5)

"""**Calculation of Recency, Frequency, Monetary scores**"""

def Recency_Score(x,p,d):
    if x <= d[p][0.25]:
        return 1
    elif x <= d[p][0.50]:
        return 2
    elif x <= d[p][0.75]:
        return 3
    else:
        return 4

def Freq_Monetary_Score(x,p,d):
    if x <= d[p][0.25]:
        return 4
    elif x <= d[p][0.50]:
        return 3
    elif x <= d[p][0.75]:
        return 2
    else:
        return 1

quantile = recency_frequency_monetary.quantile(q=[0.25,0.5,0.75])
quantile

"""**Calculation of the Quartile values for  Recency, Frequency, Monetary**"""

recency_frequency_monetary['Recency_Quartile'] = recency_frequency_monetary['Recency'].apply(Recency_Score,args=('Recency',quantile))
recency_frequency_monetary['Frequency_Quartile'] = recency_frequency_monetary['Frequency'].apply(Freq_Monetary_Score, args=('Frequency',quantile))
recency_frequency_monetary['Monetary_Quartile'] = recency_frequency_monetary['Monetary'].apply(Freq_Monetary_Score, args=('Monetary',quantile))

quantile.to_dict()

recency_frequency_monetary['Recency_Frequency_Monetary_Score'] = recency_frequency_monetary.Recency_Quartile.map(str) \
                            + recency_frequency_monetary.Frequency_Quartile.map(str) \
                            + recency_frequency_monetary.Monetary_Quartile.map(str)
recency_frequency_monetary.head()

recency_frequency_monetary['Total_Score'] = recency_frequency_monetary.Recency_Quartile + recency_frequency_monetary.Frequency_Quartile + recency_frequency_monetary.Monetary_Quartile
recency_frequency_monetary.head()

"""**Finding the type of customers**"""

print("Best Customers: ",len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='443']))
print('Loyal Customers: ',len(recency_frequency_monetary[recency_frequency_monetary['Frequency_Quartile']==4]))
print("Big Spenders: ",len(recency_frequency_monetary[recency_frequency_monetary['Monetary_Quartile']==3]))
print('Almost Lost: ', len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='134']))
print('Lost Customers: ',len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='344']))
print('Lost Cheap Customers: ',len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='444']))

Best_Customers = len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='443'])
Loyal_Customers = len(recency_frequency_monetary[recency_frequency_monetary['Frequency_Quartile']==4])
Big_Spenders = len(recency_frequency_monetary[recency_frequency_monetary['Monetary_Quartile']==3])
Almost_Lost = len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='134'])
Lost_Customers = len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='344'])
Lost_Cheap_Customers =len(recency_frequency_monetary[recency_frequency_monetary['Recency_Frequency_Monetary_Score']=='444'])

d = {'Best_Customers':[106], 'Loyal_Customers':[1102], 'Big_Spenders':[1093], 'Almost_Lost':[21], 'Lost_Customers':[180], 'Lost_Cheap_Customers':[384]}
df = pd.DataFrame(d)

df

plt.figure(figsize = (15,5))
sns.barplot(df)

"""**Adding all the newly calculated scores to the dataframe**"""

recency_frequency_monetary.sort_values(by=['Recency_Frequency_Monetary_Score', 'Monetary'], ascending=[True, False])

"""**Plot for Total_Recency_Score**"""

recency_frequency_monetary.groupby('Total_Score')['Recency'].mean().plot(kind='bar')
plt.title('Total_Recency_Score')

"""**Plot for Total_Frequency_Score**"""

recency_frequency_monetary.groupby('Total_Score')['Frequency'].mean().plot(kind='bar')
plt.title('Total_Frequency_Score')

"""**Plot for Total_Monetary_Score**"""

recency_frequency_monetary.groupby('Total_Score')['Monetary'].mean().plot(kind='bar')
 plt.title('Total_Monetary_Score')

"""**Heatmap of RFM data representing the correlation between the attributes**"""

plt.figure(figsize = (10, 10))
sns.heatmap(recency_frequency_monetary.corr(), annot = True)

new = c.groupby(['CustomerID'], as_index = False)['date'].max()
new.columns = ['CustomerID', 'LastPurchaseDate']
new.head()

new = new.drop('CustomerID', axis = 1)

new

new['Recency'] = (new['LastPurchaseDate'].max() - new['LastPurchaseDate']) / pd.Timedelta('1 day')

new

new['Frequency'] = 1 / new['Recency']
new['LastPurchaseDate'] = pd.to_datetime(new['LastPurchaseDate'])

"""**New data derived from the original data for the time series analysis**"""

new

forecast_data = new[["Recency", "Frequency"]]

"""**Using the Prophet model for the time series analysis**"""

from prophet import Prophet
import datetime
recency_model = Prophet()
frequency_model = Prophet()
new = new.rename(columns={"LastPurchaseDate": "ds", "Recency": "y"})
forecast_horizon = 3
recency_model.fit(new[["ds", "y"]])
frequency_model.fit(new[["ds", "y"]])
future_dates = pd.date_range(start=new["ds"].max() + datetime.timedelta(days=1), periods=forecast_horizon + 1, freq="D")

new

"""**Storing the values in the dataframe**"""

import datetime
forecast_data = pd.DataFrame({
    "Date":new["ds"],
    "Recency": new["y"],
    "Frequency": new["Frequency"]
})
column_names = list(forecast_data.columns) + ["month"]
forecast_horizon = 3
combined_forecast = pd.DataFrame({
    "month": pd.date_range(start=new["ds"].max() + datetime.timedelta(days=1), periods=forecast_horizon + 1, freq="M").format("%m-%Y")})
forecast_data = {
    "month": pd.to_datetime(new["ds"]).dt.strftime("%m-%Y"),
    "recency": forecast_data["Recency"],  # Include the "recency" column
    "frequency": forecast_data["Frequency"]
}
columns=column_names
forecast_data = pd.DataFrame(forecast_data)

forecast_data = forecast_data.sort_values(by="month", ascending=True)
print(forecast_data)

"""**Time Series graph**"""

import matplotlib.pyplot as plt

# Plot the time series for Recency
plt.figure(figsize=(10, 6))
plt.plot(forecast_data["month"], forecast_data["recency"], label="Recency")
plt.xlabel("Date")
plt.ylabel("Recency")
plt.title("Time Series Plot for Recency")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot the time series for Frequency
plt.figure(figsize=(10, 6))
plt.plot(forecast_data["month"], forecast_data["frequency"], label="Frequency")
plt.xlabel("Date")
plt.ylabel("Frequency")
plt.title("Time Series Plot for Frequency")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

